Author: Alastair McKinstry <mckinstry@debian.org>
Description: Move from deprecated auto_ptr to std::unique_ptr
Last-Updated: 2017-10-03
Forwarded: no

Index: libdap-3.19.1/tests/dmr-test.cc
===================================================================
--- libdap-3.19.1.orig/tests/dmr-test.cc
+++ libdap-3.19.1/tests/dmr-test.cc
@@ -150,7 +150,7 @@ send_data(DMR *dataset, const string &co
     // It's declared at this scope because we (may) need it for the code beyond the
     // function parse/eval code that immediately follows. jhrg 3/12/14
     D4TestTypeFactory d4_factory;
-    auto_ptr<DMR> function_result(new DMR(&d4_factory, "function_results"));
+    unique_ptr<DMR> function_result(new DMR(&d4_factory, "function_results"));
 
 	// The Function Parser
 	if (!function.empty()) {
Index: libdap-3.19.1/unit-tests/HTTPCacheTest.cc
===================================================================
--- libdap-3.19.1.orig/unit-tests/HTTPCacheTest.cc
+++ libdap-3.19.1/unit-tests/HTTPCacheTest.cc
@@ -543,7 +543,7 @@ public:
         try {
             delete hc;
             hc = 0;
-            auto_ptr<HTTPCache> gc(new HTTPCache("cache-testsuite/gc_cache", true));
+            unique_ptr<HTTPCache> gc(new HTTPCache("cache-testsuite/gc_cache", true));
             DBG(cerr << "get_cache_root: " << gc->get_cache_root() << endl);
 
             HTTPResponse *rs = http_conn->fetch_url(localhost_url);
@@ -575,7 +575,7 @@ public:
     void purge_cache_and_release_cached_response_test()
     {
         try {
-            auto_ptr<HTTPCache> pc(new HTTPCache("cache-testsuite/purge_cache", true));
+            unique_ptr<HTTPCache> pc(new HTTPCache("cache-testsuite/purge_cache", true));
             DBG(cerr << "get_cache_root: " << pc->get_cache_root() << endl);
 
             time_t now = time(0);
@@ -686,7 +686,7 @@ public:
     void get_conditional_response_headers_test()
     {
         try {
-            auto_ptr<HTTPCache> c(new HTTPCache("cache-testsuite/header_cache", true));
+            unique_ptr<HTTPCache> c(new HTTPCache("cache-testsuite/header_cache", true));
             DBG(cerr << "get_cache_root: " << c->get_cache_root() << endl);
 
             CPPUNIT_ASSERT(c->get_cache_root() == "cache-testsuite/header_cache/");
@@ -723,7 +723,7 @@ public:
     void update_response_test()
     {
         try {
-            auto_ptr<HTTPCache> c(new HTTPCache("cache-testsuite/singleton_cache", true));
+            unique_ptr<HTTPCache> c(new HTTPCache("cache-testsuite/singleton_cache", true));
             DBG(cerr << "get_cache_root: " << c->get_cache_root() << endl);
 
             if (!c->is_url_in_cache(localhost_url)) {
@@ -786,7 +786,7 @@ public:
     void interrupt_test()
     {
         try {
-            auto_ptr<HTTPCache> c(new HTTPCache("cache-testsuite/singleton_cache", true));
+            unique_ptr<HTTPCache> c(new HTTPCache("cache-testsuite/singleton_cache", true));
             string coads = "http://test.opendap.org/dap/data/nc/coads_climatology.nc";
             if (!c->is_url_in_cache(coads)) {
                 HTTPResponse *rs = http_conn->fetch_url(coads);
@@ -807,7 +807,7 @@ public:
         string jan = "http://test.opendap.org/dap/data/nc/jan.nc.dds";
         string feb = "http://test.opendap.org/dap/data/nc/feb.nc.dds";
         try {
-            auto_ptr<HTTPCache> pc(new HTTPCache("cache-testsuite/purge_cache", true));
+            unique_ptr<HTTPCache> pc(new HTTPCache("cache-testsuite/purge_cache", true));
 #if 0
             // This broke Fedora ppc64le system with XFS system
             CPPUNIT_ASSERT(pc->d_http_cache_table->d_block_size == 4096);
@@ -856,7 +856,7 @@ public:
         // performed. The feb URL should have been deleted.
 
         try {
-            auto_ptr<HTTPCache> pc(new HTTPCache("cache-testsuite/purge_cache", true));
+            unique_ptr<HTTPCache> pc(new HTTPCache("cache-testsuite/purge_cache", true));
             CPPUNIT_ASSERT(!pc->is_url_in_cache(feb));
         }
         catch (Error &e) {
Index: libdap-3.19.1/unit-tests/D4FilterClauseTest.cc
===================================================================
--- libdap-3.19.1.orig/unit-tests/D4FilterClauseTest.cc
+++ libdap-3.19.1/unit-tests/D4FilterClauseTest.cc
@@ -115,25 +115,25 @@ public:
         D4RValue *arg1 = new D4RValue(byte);    // holds 17
         D4RValue *arg2 = new D4RValue((long long) 21);
 
-        auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+        unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
         CPPUNIT_ASSERT(less->value(dmr));
 
         D4RValue *arg2_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg2_2 = new D4RValue((long long) 21);
 
-        auto_ptr<D4FilterClause> greater(new D4FilterClause(D4FilterClause::greater, arg2_1, arg2_2));
+	unique_ptr<D4FilterClause> greater(new D4FilterClause(D4FilterClause::greater, arg2_1, arg2_2));
         CPPUNIT_ASSERT(!greater->value(dmr));
 
         D4RValue *arg3_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg3_2 = new D4RValue((long long) 21);
 
-        auto_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
+        unique_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
         CPPUNIT_ASSERT(!equal->value(dmr));
 
         D4RValue *arg4_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg4_2 = new D4RValue((long long) 21);
 
-        auto_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
+        unique_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
         CPPUNIT_ASSERT(not_equal->value(dmr));
     }
 
@@ -143,25 +143,25 @@ public:
         D4RValue *arg1 = new D4RValue(byte);    // holds 17
         D4RValue *arg2 = new D4RValue((long long) 21);
 
-        auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+        unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
         CPPUNIT_ASSERT(less->value());
 
         D4RValue *arg2_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg2_2 = new D4RValue((long long) 21);
 
-        auto_ptr<D4FilterClause> greater(new D4FilterClause(D4FilterClause::greater, arg2_1, arg2_2));
+        unique_ptr<D4FilterClause> greater(new D4FilterClause(D4FilterClause::greater, arg2_1, arg2_2));
         CPPUNIT_ASSERT(!greater->value());
 
         D4RValue *arg3_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg3_2 = new D4RValue((long long) 21);
 
-        auto_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
+        unique_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
         CPPUNIT_ASSERT(!equal->value());
 
         D4RValue *arg4_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg4_2 = new D4RValue((long long) 21);
 
-        auto_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
+        unique_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
         CPPUNIT_ASSERT(not_equal->value());
     }
 
@@ -170,25 +170,25 @@ public:
         D4RValue *arg1 = new D4RValue(byte);    // holds 17
         D4RValue *arg2 = new D4RValue((double) 21.0);
 
-        auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+        unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
         CPPUNIT_ASSERT(less->value(dmr));
 
         D4RValue *arg2_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg2_2 = new D4RValue((double) 21);
 
-        auto_ptr<D4FilterClause> greater(new D4FilterClause(D4FilterClause::greater, arg2_1, arg2_2));
+        unique_ptr<D4FilterClause> greater(new D4FilterClause(D4FilterClause::greater, arg2_1, arg2_2));
         CPPUNIT_ASSERT(!greater->value(dmr));
 
         D4RValue *arg3_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg3_2 = new D4RValue((double) 21);
 
-        auto_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
+        unique_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
         CPPUNIT_ASSERT(!equal->value(dmr));
 
         D4RValue *arg4_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg4_2 = new D4RValue((double) 21);
 
-        auto_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
+        unique_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
         CPPUNIT_ASSERT(not_equal->value(dmr));
     }
 
@@ -200,7 +200,7 @@ public:
         D4RValue *arg1 = new D4RValue(byte);    // holds 17
         D4RValue *arg2 = new D4RValue((unsigned long long) (21));
 
-        auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+        unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
         CPPUNIT_ASSERT(less->value());
 
     }
@@ -210,7 +210,7 @@ public:
         D4RValue *arg1 = new D4RValue(byte);    // holds 17
         D4RValue *arg2 = new D4RValue((float) 21.0);
 
-        auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+        unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
         CPPUNIT_ASSERT(less->value());
 
     }
@@ -222,25 +222,25 @@ public:
         D4RValue *arg1 = new D4RValue(str);
         D4RValue *arg2 = new D4RValue(string("Tesla"));
 
-        auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+        unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
         CPPUNIT_ASSERT(less->value());
 
         D4RValue *arg2_1 = new D4RValue(str);
         D4RValue *arg2_2 = new D4RValue("Tesla");
 
-        auto_ptr<D4FilterClause> greater(new D4FilterClause(D4FilterClause::greater, arg2_1, arg2_2));
+        unique_ptr<D4FilterClause> greater(new D4FilterClause(D4FilterClause::greater, arg2_1, arg2_2));
         CPPUNIT_ASSERT(!greater->value());
 
         D4RValue *arg3_1 = new D4RValue(str);
         D4RValue *arg3_2 = new D4RValue("Tesla");
 
-        auto_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
+        unique_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
         CPPUNIT_ASSERT(!equal->value(dmr));
 
         D4RValue *arg4_1 = new D4RValue(str);
         D4RValue *arg4_2 = new D4RValue("Tesla");
 
-        auto_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
+        unique_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
         CPPUNIT_ASSERT(not_equal->value(dmr));
     }
 
@@ -249,7 +249,7 @@ public:
         D4RValue *arg1 = new D4RValue(str);
         D4RValue *arg2 = new D4RValue(string("E.*n"));
 
-        auto_ptr<D4FilterClause> match(new D4FilterClause(D4FilterClause::match, arg1, arg2));
+        unique_ptr<D4FilterClause> match(new D4FilterClause(D4FilterClause::match, arg1, arg2));
         CPPUNIT_ASSERT(match->value());
     }
 
@@ -259,7 +259,7 @@ public:
         D4RValue *arg2 = new D4RValue((long long) 21);
 
         try {
-            auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+            unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
             // The Filter Clause instance is built OK, but the value() method
             // will balk at this comparison. jhrg 4/21/16
             DBG(cerr << "built filter clause instance" << endl);
@@ -279,7 +279,7 @@ public:
         D4RValue *arg2 = new D4RValue("Tesla");
 
         try {
-            auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+            unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
 
             CPPUNIT_ASSERT(less->value());
             CPPUNIT_FAIL("Expected error");
@@ -292,13 +292,13 @@ public:
 
     void Structure_and_string_error_test()
     {
-        auto_ptr<Structure> s(new Structure("s"));
+        unique_ptr<Structure> s(new Structure("s"));
         s->add_var(byte); // copy the object
         D4RValue *arg1 = new D4RValue(s.get()); // BaseType*s are not free'd by D4RValue
         D4RValue *arg2 = new D4RValue("Tesla");
 
         try {
-            auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+            unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
 
             CPPUNIT_ASSERT(less->value());
             CPPUNIT_FAIL("Expected error");
@@ -312,13 +312,13 @@ public:
     // There's no way this will get past the parser, but ...
     void Byte_and_Structure_error_test()
     {
-        auto_ptr<Structure> s(new Structure("s"));
+        unique_ptr<Structure> s(new Structure("s"));
         s->add_var(str); // copy the object
         D4RValue *arg1 = new D4RValue(byte);
         D4RValue *arg2 = new D4RValue(s.get());
 
         try {
-            auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+            unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
 
             CPPUNIT_ASSERT(less->value());
             CPPUNIT_FAIL("Expected error");
@@ -332,13 +332,13 @@ public:
     // There's no way this will get past the parser, but ...
     void Str_and_Structure_error_test()
     {
-        auto_ptr<Structure> s(new Structure("s"));
+        unique_ptr<Structure> s(new Structure("s"));
         s->add_var(str); // copy the object
         D4RValue *arg1 = new D4RValue(str);
         D4RValue *arg2 = new D4RValue(s.get());
 
         try {
-            auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
+            unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg1, arg2));
 
             CPPUNIT_ASSERT(less->value());
             CPPUNIT_FAIL("Expected error");
@@ -355,25 +355,25 @@ public:
         D4RValue *arg2_1 = new D4RValue(f32);
         D4RValue *arg2_2 = new D4RValue(17.0);
 
-        auto_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg2_1, arg2_2));
+        unique_ptr<D4FilterClause> less(new D4FilterClause(D4FilterClause::less, arg2_1, arg2_2));
         CPPUNIT_ASSERT(less->value());
 
         D4RValue *arg3_1 = new D4RValue(url);
         D4RValue *arg3_2 = new D4RValue("https://github.com/opendap");
 
-        auto_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
+        unique_ptr<D4FilterClause> equal(new D4FilterClause(D4FilterClause::equal, arg3_1, arg3_2));
         CPPUNIT_ASSERT(equal->value(dmr));
 
         D4RValue *arg4_1 = new D4RValue(url);
         D4RValue *arg4_2 = new D4RValue("https://.*dap$");
 
-        auto_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
+        unique_ptr<D4FilterClause> not_equal(new D4FilterClause(D4FilterClause::not_equal, arg4_1, arg4_2));
         CPPUNIT_ASSERT(not_equal->value(dmr));
 
         D4RValue *arg5_1 = new D4RValue(url);
         D4RValue *arg5_2 = new D4RValue("https://.*dap$");
 
-        auto_ptr<D4FilterClause> match(new D4FilterClause(D4FilterClause::match, arg5_1, arg5_2));
+        unique_ptr<D4FilterClause> match(new D4FilterClause(D4FilterClause::match, arg5_1, arg5_2));
         CPPUNIT_ASSERT(match->value(dmr));
     }
 
@@ -382,7 +382,7 @@ public:
         D4RValue *arg2_1 = new D4RValue(f32);
         D4RValue *arg2_2 = new D4RValue(3.1415);
 
-        auto_ptr<D4FilterClause> clause(new D4FilterClause(D4FilterClause::equal, arg2_1, arg2_2));
+        unique_ptr<D4FilterClause> clause(new D4FilterClause(D4FilterClause::equal, arg2_1, arg2_2));
         CPPUNIT_ASSERT(clause->value());
     }
 
@@ -391,7 +391,7 @@ public:
         D4RValue *arg2_1 = new D4RValue(f32);
         D4RValue *arg2_2 = new D4RValue(3.1415);
 
-        auto_ptr<D4FilterClause> clause(new D4FilterClause(D4FilterClause::greater_equal, arg2_1, arg2_2));
+        unique_ptr<D4FilterClause> clause(new D4FilterClause(D4FilterClause::greater_equal, arg2_1, arg2_2));
         CPPUNIT_ASSERT(clause->value());
     }
 
@@ -400,25 +400,25 @@ public:
         D4RValue *arg2_1 = new D4RValue(f32);
         D4RValue *arg2_2 = new D4RValue(3.1415);
 
-        auto_ptr<D4FilterClause> clause(new D4FilterClause(D4FilterClause::less_equal, arg2_1, arg2_2));
+        unique_ptr<D4FilterClause> clause(new D4FilterClause(D4FilterClause::less_equal, arg2_1, arg2_2));
         CPPUNIT_ASSERT(clause->value());
     }
 
     void int_test()
     {
-        auto_ptr<Int8> i8(new Int8(""));
+        unique_ptr<Int8> i8(new Int8(""));
         i8->set_value(17);
         D4RValue *arg2_1 = new D4RValue(i8.get());
         D4RValue *arg2_2 = new D4RValue((long long) 17);
 
-        auto_ptr<D4FilterClause> clause(new D4FilterClause(D4FilterClause::equal, arg2_1, arg2_2));
+        unique_ptr<D4FilterClause> clause(new D4FilterClause(D4FilterClause::equal, arg2_1, arg2_2));
         CPPUNIT_ASSERT(clause->value());
     }
 
     void true_clauses_test()
     {
         // Testing this as a pointer since that's how it will be stored in D4Sequence
-        auto_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
+        unique_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
 
         D4RValue *arg1_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg1_2 = new D4RValue((double) 21.0);
@@ -444,7 +444,7 @@ public:
     // This should return true
     void no_clauses_test()
     {
-        auto_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
+        unique_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
 
         CPPUNIT_ASSERT(clauses->size() == 0);
         CPPUNIT_ASSERT(clauses->value(dmr));
@@ -453,7 +453,7 @@ public:
 
     void false_clauses_test()
     {
-        auto_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
+        unique_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
 
         D4RValue *arg1_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg1_2 = new D4RValue((double) 21.0);
@@ -479,7 +479,7 @@ public:
 
     void evaluation_order_test()
     {
-        auto_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
+        unique_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
 
         D4RValue *arg1_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg1_2 = new D4RValue((double) 21.0);
@@ -513,7 +513,7 @@ public:
 
     void evaluation_order_test_2()
     {
-        auto_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
+        unique_ptr<D4FilterClauseList> clauses(new D4FilterClauseList());
 
         D4RValue *arg1_1 = new D4RValue(byte);    // holds 17
         D4RValue *arg1_2 = new D4RValue((double) 21.0);
Index: libdap-3.19.1/unit-tests/D4SequenceTest.cc
===================================================================
--- libdap-3.19.1.orig/unit-tests/D4SequenceTest.cc
+++ libdap-3.19.1/unit-tests/D4SequenceTest.cc
@@ -127,7 +127,7 @@ public:
 
     void copy_ctor_test()
     {
-        auto_ptr<TestD4Sequence> ts(new TestD4Sequence(*s));
+        unique_ptr<TestD4Sequence> ts(new TestD4Sequence(*s));
         ts->intern_data();
 
         CPPUNIT_ASSERT(ts->length() == 7);
